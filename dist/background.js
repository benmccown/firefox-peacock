// Config
const COLORS = ['#ec5f67', '#ffc09f', '#ffee93', '#adf7b6', '#5fb3b3', '#6699cc', '#a0ced9', '#fcf5c7'];
function colorSingleRgbValueToHex(colorValue) {
    const hex = colorValue.toString(16);
    return hex.length == 1 ? '0' + hex : hex;
}
function colorRgbToHex(rgbColor) {
    return ('#' +
        colorSingleRgbValueToHex(rgbColor.r) +
        colorSingleRgbValueToHex(rgbColor.g) +
        colorSingleRgbValueToHex(rgbColor.b));
}
function colorHexToRgb(hexColor) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexColor);
    if (!result) {
        throw new Error('Could not convert hex color to rgb.');
    }
    return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
    };
}
function darkenHexColor(hexColor, darkenBy) {
    const rgbColor = colorHexToRgb(hexColor);
    const darkerRgbColor = {
        r: Math.max(rgbColor.r - darkenBy, 0),
        g: Math.max(rgbColor.g - darkenBy, 0),
        b: Math.max(rgbColor.b - darkenBy, 0),
    };
    return colorRgbToHex(darkerRgbColor);
}
function getRandomColor() {
    const randomizer = Math.floor(Math.random() * COLORS.length);
    return COLORS[randomizer];
}
// Colors Utils End
// Storage Utils
const windowsToColorMap = new Map();
async function loadWindowToMemory(windowId) {
    const colorValue = await getWindowColorLocalStorage(windowId);
    if (!colorValue) {
        return;
    }
    setWindowColorInMemory(windowId, colorValue);
}
function removeWindow(windowId) {
    windowsToColorMap.delete(windowId);
    const keyString = getStorageKey(windowId);
    browser.storage.local.remove(keyString);
}
async function saveWindowColor(windowId, color) {
    setWindowColorInMemory(windowId, color);
    await setWindowColorLocalStorage(windowId, color);
}
function isWindowColorInMemory(windowId) {
    return windowsToColorMap.has(windowId);
}
function getWindowColorInMemory(windowId) {
    return windowsToColorMap.get(windowId);
}
function setWindowColorInMemory(windowId, color) {
    windowsToColorMap.set(windowId, color);
}
async function setWindowColorLocalStorage(windowId, color) {
    const keyString = getStorageKey(windowId);
    const storageObject = {};
    const colorValue = color;
    storageObject[keyString] = {
        colorValue,
    };
    await browser.storage.local.set(storageObject);
}
async function isWindowColorInLocalStorage(windowId) {
    const keyString = getStorageKey(windowId);
    const storageObject = await browser.storage.local.get(keyString);
    const colorStorage = storageObject[keyString];
    return colorStorage ? true : false;
}
async function getWindowColorLocalStorage(windowId) {
    const keyString = getStorageKey(windowId);
    const storageObject = await browser.storage.local.get(keyString);
    const colorStorage = storageObject[keyString];
    if (!colorStorage) {
        return undefined;
    }
    return colorStorage.colorValue;
}
function getStorageKey(windowId) {
    return `peacockColor${windowId}`;
}
// Storage Utils End
// Theme Utils
function buildTheme(color) {
    const rgbColor = colorHexToRgb(color);
    let textColor = '#000000';
    if (rgbColor.r * 0.299 + rgbColor.g * 0.587 + rgbColor.b * 0.114 <= 186) {
        textColor = '#ffffff';
    }
    return {
        colors: {
            frame: color,
            tab_selected: darkenHexColor(color, 30),
            tab_background_text: textColor,
            tab_text: textColor,
        },
    };
}
async function preserveExistingTheme(newTheme) {
    const currentTheme = await browser.theme.getCurrent();
    const joinedTheme = {
        ...currentTheme,
        colors: {
            ...currentTheme.colors,
            ...newTheme.colors,
        },
    };
    return joinedTheme;
}
// Theme Utils End
async function getWindowColor(windowId) {
    if (isWindowColorInMemory(windowId)) {
        return getWindowColorInMemory(windowId);
    }
    else if (await isWindowColorInLocalStorage(windowId)) {
        const color = await getWindowColorLocalStorage(windowId);
        return color;
    }
    else {
        const color = getRandomColor();
        return color;
    }
}
async function applyThemeToAllWindows() {
    for (const window of await browser.windows.getAll()) {
        const windowId = window.id;
        await loadWindowToMemory(windowId);
        let color = await getWindowColor(windowId);
        await saveWindowColor(windowId, color);
        const wrappedTheme = await preserveExistingTheme(buildTheme(color));
        browser.theme.update(window.id, wrappedTheme);
    }
}
const cleanupWindow = (windowId) => {
    removeWindow(windowId);
};
function handleMessage(request, sender, sendResponse) {
    if (request.messageType === 'peacock-refresh') {
        applyThemeToAllWindows();
        sendResponse({ response: 'response from background script' });
    }
}
console.log('Loading Peacock Extension.');
applyThemeToAllWindows();
browser.windows.onCreated.addListener(applyThemeToAllWindows);
browser.runtime.onStartup.addListener(applyThemeToAllWindows);
browser.windows.onRemoved.addListener(cleanupWindow);
browser.runtime.onMessage.addListener(handleMessage);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVM7QUFDVCxNQUFNLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQVd4RyxTQUFTLHdCQUF3QixDQUFDLFVBQWtCO0lBQ2xELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsT0FBTyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzNDLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxRQUFrQjtJQUN2QyxPQUFPLENBQ0wsR0FBRztRQUNILHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQ3JDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsUUFBZ0I7SUFDckMsTUFBTSxNQUFNLEdBQUcsMkNBQTJDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFFLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzFCLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMxQixDQUFDLEVB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